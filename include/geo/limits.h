////////////////////////////////////////////////////////////
///
/// POLDER Geo - POLDER library defining the limits for margin errors
/// Written by Morwenn Edrahir, 2011
///
////////////////////////////////////////////////////////////

#ifndef _POLDER_GEO_LIMITS_H
#define _POLDER_GEO_LIMITS_H

////////////////////////////////////////////////////////////
/// Headers
////////////////////////////////////////////////////////////
#include <cmath>
#include <limits>


namespace polder
{
namespace geo
{


////////////////////////////////////////////////////////////
/// Variables
////////////////////////////////////////////////////////////

// Margin errors for comparison
static double geo_margin_error = std::numeric_limits<double>::epsilon() * 10;


////////////////////////////////////////////////////////////
/// Functions
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
/// Get the margin error used in geometric equality
///
////////////////////////////////////////////////////////////
double margin_error();

////////////////////////////////////////////////////////////
/// Set the margin error
///
/// \param error: New value of the margin error
///
////////////////////////////////////////////////////////////
void set_margin_error(double error);

////////////////////////////////////////////////////////////
/// Reset the margin error
///
////////////////////////////////////////////////////////////
void reset_margin_error();

////////////////////////////////////////////////////////////
/// Compare two doubles taking in account the margin error
///
/// \param a: First double to compare
/// \param b: Second double to compare
///
////////////////////////////////////////////////////////////
bool round_equal(double a, double b);

////////////////////////////////////////////////////////////
/// Compare two set of data taking in account the margin error
///
/// \param first: Iterator on the first element of the first set of data to compare
/// \param last: Iterator on the last element of the first set of data to compare
/// \param first2: Iterator on the first element of the second set of data to compare
///
////////////////////////////////////////////////////////////
template<typename InputIterator>
bool round_equal(InputIterator first, InputIterator last, InputIterator first2)
{
    auto j = first2;
    for (auto i = first ; i != last ; ++i, ++j)
    {
        if (fabs(*i-*j) > geo_margin_error)
        {
            return false;
        }
    }
    return true;
}


} // namespace geo
} // namespace polder


#endif
